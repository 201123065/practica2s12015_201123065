#include <stdio.h>
#include <string.h>
#include <stdlib.h> 
#include "vector.h"
#include <stdbool.h>
/*declaracion de funciones*/
void menu();
int tam(char *salida);
/*fin de la declaracion*/

struct vector{
	size_t tam;
	void** datos;
};

vector_t* vector_crear(size_t tam_inicial){

	vector_t* vector = malloc(sizeof(vector_t));
	if(vector==NULL)return NULL;

	vector->tam =tam_inicial;

	vector->datos = malloc(sizeof(void*)*tam_inicial);
	if(vector->datos==NULL)
	{
		free(vector);
		return NULL;
	}

	int i=0;
	for(i=0;i<tam_inicial;i++)
	{
		vector->datos[i]=NULL;
	}
	return vector;
}

void vector_agregar(vector_t* vector, size_t indice, void * elemento)
{
	if(indice<0 || indice >=vector->tam)return false;
	vector->datos[indice]= elemento;
	return true;
}


size_t vector_obtener_tam(vector_t* vector){
	return vector->tam;
}

void* vector_obtener(vector_t*, size_t indice)
{
	if(indice<0 || indice >=vector->tam) return NULL;
	return vector->datos[indice];
}



void vector_redim(vector_t* vector, size_t nuevotam)
{
	if(nuevotam<0 || vector->tam) return false;
	void** datos_nuevos = realloc(vector->datos,nuevotam*sizeof(void*));
	if(datos_nuevos==NULL)return false;
	free(vector->datos);
	vector->datos = datos_nuevos;
	vector->tam = nuevotam;
	return true;
}


void vector_destruir(vector_t* vector)
{
	free(vector->datos);
	free(vector);
}


#define MAX_TAM 24

char* ruta;
int tVec=-1;

int main(){
	puts("bienvenido al evaluador de tiempos, por Marcos Mayen");
	int salida;
	do{
		menu();
		scanf("%d",&salida);
		switch (salida)
		{
			case 1:
				puts("carga de datos");	
				char guia[50]="/home/marcosmayen/Desktop/";
				puts("ingrese el nombre del archivo(escritorio)");
				char arch[MAX_TAM];
				scanf("%s",arch);
				strcat(guia,arch);
				ruta=guia;
				tVec=tam(guia);
				
				break;
			case 2:
				if(tVec==-1)
				{
					puts("_____________________________________");
					puts("|ahun no has cargado nada al archivo|");
					puts("|esta funcion no puede ser accedida |");
					puts("_____________________________________");
				}
				else{
					puts("tiempo de uso");
					printf("%d",tVec);

				}
				break;
			case 3:
				puts("gracias por usar el programa\n");
				break;
			default :
				puts("Esta funcion no esta disponible\n\n");
		}
	}while(salida!=3);
	return 0;
}


void menu()
{	puts("---------------------------------------------------------------");
	puts("|por favor seleccione una de las siguientes opciones:         |");	
	puts("|1.-Cargar un nuevo archivo(este debe estar en el escritorio) |");
	puts("|2.-mostrar tiempo de ejecucion                               |");
	puts("|3.-salir_____________________________________________________|\n");
}



/*determina el tam. de la cadena y si existe*/
int tam(char *salida)
{
	int c,n=0;
	FILE* pf;
	if((pf = fopen(salida,"rt"))==NULL)
	{
		puts("Error, el archivo que busca no parece existir");
		return -1;
	}
	while((c=getc(pf))!=EOF)
	{
	
		if(c == '\n')
		{
			printf("\n");
		}
		else{
			putchar(c);
		}
		n++;
	}	
	char arreglo[n+1];
	n=0;
	while((c=getc(pf)!=EOF))
	{
		arreglo[n]=c;
		n++;
	}
	fclose(pf);
	printf("%c",arreglo[5]);
	return n;
}



